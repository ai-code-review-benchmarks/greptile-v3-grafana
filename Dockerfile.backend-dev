# syntax=docker/dockerfile:1

ARG BASE_IMAGE=alpine:3.21
ARG GO_IMAGE=golang:1.24.4-alpine

# Development Go build stage
FROM ${GO_IMAGE} AS go-dev-builder

RUN apk add --no-cache \
    binutils-gold \
    bash \
    gcc g++ make git jq findutils

WORKDIR /tmp/grafana

RUN go env GOCACHE
RUN go env GOPATH

COPY .bingo .bingo
COPY .citools .citools

# Copy go mod files first
# ls -1 {pkg,scripts,apps}**/go.{mod,sum} | sed 's#\(.*\)/go\.\(mod\|sum\)#COPY \1/go.* \1#' | sort -u
COPY apps/advisor/go.* apps/advisor/
COPY apps/alerting/notifications/go.* apps/alerting/notifications/
COPY apps/dashboard/go.* apps/dashboard/
COPY apps/folder/go.* apps/folder/
COPY apps/iam/go.* apps/iam/
COPY apps/investigations/go.* apps/investigations/
COPY apps/playlist/go.* apps/playlist/
COPY pkg/aggregator/go.* pkg/aggregator/
COPY pkg/apimachinery/go.* pkg/apimachinery/
COPY pkg/apis/secret/go.* pkg/apis/secret/
COPY pkg/apiserver/go.* pkg/apiserver/
COPY pkg/build/go.* pkg/build/
COPY pkg/build/wire/go.* pkg/build/wire/
COPY pkg/codegen/go.* pkg/codegen/
COPY pkg/plugins/codegen/go.* pkg/plugins/codegen/
COPY pkg/promlib/go.* pkg/promlib/
COPY pkg/semconv/go.* pkg/semconv/
COPY scripts/go-workspace/go.* scripts/go-workspace/
COPY scripts/modowners/go.* scripts/modowners/

# Install dependencies
COPY go.* ./
COPY cue.mod cue.mod
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go mod download

# Copy source files
COPY Makefile embed.go build.go ./
COPY kinds kinds
COPY local local
COPY public/api-merged.json public/api-merged.json
COPY scripts scripts
COPY kindsv2 kindsv2
COPY apps apps
COPY conf/defaults.ini conf/defaults.ini
COPY conf/sample.ini conf/sample.ini
COPY conf/ldap.toml conf/ldap.toml
COPY conf/ldap_multiple.toml conf/ldap_multiple.toml
COPY pkg pkg
COPY package.json package.json

RUN ls -lah .

# Build the Go binary without symbols
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go build -trimpath \
    -ldflags="-s -w -X main.version=$(cat package.json | jq -r .version) -X main.commit=FEEDC0DE -X main.buildstamp=1609750800 -X main.buildBranch=dev" \
    -o ./bin/grafana \
    ./pkg/cmd/grafana

WORKDIR /tmp/plugins
COPY public/app/plugins ./
RUN find . -type f ! -name plugin.json -delete && \
    find . -type d -empty -delete
RUN find . -type d -exec sh -c 'printf "\n%s:\n" "$1"; ls -lah "$1"' _ {} \;

# Development runtime stage
FROM ${BASE_IMAGE}

LABEL maintainer="Grafana Labs <hello@grafana.com>"

ARG GF_UID="472"
ARG GF_GID="0"

ENV PATH="/usr/share/grafana/bin:$PATH" \
    GF_PATHS_CONFIG="/etc/grafana/grafana.ini" \
    GF_PATHS_DATA="/var/lib/grafana" \
    GF_PATHS_HOME="/usr/share/grafana" \
    GF_PATHS_LOGS="/var/log/grafana" \
    GF_PATHS_PLUGINS="/var/lib/grafana/plugins" \
    GF_PATHS_PROVISIONING="/etc/grafana/provisioning"

WORKDIR $GF_PATHS_HOME

# Install Node.js, npm, and nodemon for development
RUN apk add --no-cache ca-certificates tzdata musl-utils bash

# glibc support for alpine x86_64 only
ARG GLIBC_VERSION=2.40
RUN if [ `arch` = "x86_64" ]; then \
  wget -qO- "https://dl.grafana.com/glibc/glibc-bin-$GLIBC_VERSION.tar.gz" | tar zxf - -C / \
  usr/glibc-compat/lib/ld-linux-x86-64.so.2 \
  usr/glibc-compat/lib/libc.so.6 \
  usr/glibc-compat/lib/libdl.so.2 \
  usr/glibc-compat/lib/libm.so.6 \
  usr/glibc-compat/lib/libpthread.so.0 \
  usr/glibc-compat/lib/librt.so.1 \
  usr/glibc-compat/lib/libresolv.so.2 && \
  mkdir /lib64 && \
  ln -s /usr/glibc-compat/lib/ld-linux-x86-64.so.2 /lib64; \
  fi

# Copy configuration
COPY --from=go-dev-builder /tmp/grafana/conf ./conf

# Setup grafana user and directories
RUN if [ ! $(getent group "$GF_GID") ]; then \
  addgroup -S -g $GF_GID grafana; \
  fi && \
  GF_GID_NAME=$(getent group $GF_GID | cut -d':' -f1) && \
  mkdir -p "$GF_PATHS_HOME/.aws" && \
  adduser -S -u $GF_UID -G "$GF_GID_NAME" grafana && \
  mkdir -p "$GF_PATHS_PROVISIONING/datasources" \
  "$GF_PATHS_PROVISIONING/dashboards" \
  "$GF_PATHS_PROVISIONING/notifiers" \
  "$GF_PATHS_PROVISIONING/plugins" \
  "$GF_PATHS_PROVISIONING/access-control" \
  "$GF_PATHS_PROVISIONING/alerting" \
  "$GF_PATHS_LOGS" \
  "$GF_PATHS_PLUGINS" \
  "$GF_PATHS_DATA" && \
  cp conf/sample.ini "$GF_PATHS_CONFIG" && \
  cp conf/ldap.toml /etc/grafana/ldap.toml && \
  chown -R "grafana:$GF_GID_NAME" "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING" && \
  chmod -R 777 "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING"

# Copy the built binary
COPY --from=go-dev-builder /tmp/grafana/bin/grafana ./bin/

RUN ls -lah ./bin

COPY public/emails public/emails
COPY public/views public/views
COPY public/dashboards public/dashboards
# COPY --from=go-dev-builder /tmp/plugins public/app/plugins
COPY public/app/plugins public/app/plugins

# Create a minimal assets-manifest.json for development
COPY fake-assets-manifest.json public/build/assets-manifest.json
RUN echo 'window.alert("Using fake assets instead of CDN")' > public/build/app.js

EXPOSE 3000

ARG RUN_SH=./packaging/docker/run.sh

COPY ${RUN_SH} /run.sh

USER "$GF_UID"
ENTRYPOINT [ "/run.sh" ]