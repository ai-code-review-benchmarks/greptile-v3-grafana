name: Backend Unit Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

permissions:
  contents: read
  id-token: write

env:
  EDITION: 'oss'
  WIRE_TAGS: 'oss'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential shared-mime-info

      - name: Verify code generation
        run: |
          CODEGEN_VERIFY=1 make gen-cue
          CODEGEN_VERIFY=1 make gen-jsonnet

      - name: Generate Go code
        run: make gen-go

      - name: Check if coverage should be generated
        id: check-coverage
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR changed files:"
            files=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --jq '.[].filename')
            echo "$files"
            if echo "$files" | grep -E "(pkg/|go\.|\.github/workflows/pr-backend-unit-tests\.yml)"; then
              echo "Coverage will be generated: true (PR changes)"
              echo "generate=true" >> $GITHUB_OUTPUT
            else
              echo "Coverage will be generated: false"
              echo "generate=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] && \
               [[ "${{ github.event.head_commit.modified }}" =~ (pkg/|go\.|\.github/workflows/pr-backend-unit-tests\.yml) ]]; then
            echo "Coverage will be generated: true (push to main)"
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "Coverage will be generated: false"
            echo "generate=false" >> $GITHUB_OUTPUT
          fi

      - name: Run unit tests
        run: |
          if [ "${{ steps.check-coverage.outputs.generate }}" == "true" ]; then
            COVER_OPTS="-coverprofile=unit.cov -coverpkg=github.com/grafana/grafana/..." make test-go-unit
          else
            make test-go-unit
          fi

      - name: Process coverage output
        if: steps.check-coverage.outputs.generate == 'true'
        run: |
          # Ensure valid coverage file even if empty
          if [ ! -s unit.cov ]; then
            echo "mode: set" > unit.cov
          fi
          
          # Convert to different formats
          go tool cover -func unit.cov > unit-funcs.log
          go tool cover -html unit.cov -o unit.html
          
          # Add coverage summary to GitHub step summary
          echo '# Coverage' >> $GITHUB_STEP_SUMMARY
          if grep -q "total:" unit-funcs.log; then
            grep 'total:' unit-funcs.log | tr '\t' ' ' >> $GITHUB_STEP_SUMMARY
          else
            echo "No coverage data available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage reports
        if: steps.check-coverage.outputs.generate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            unit.cov
            unit-funcs.log
            unit.html
          retention-days: 30
          compression-level: 9
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
