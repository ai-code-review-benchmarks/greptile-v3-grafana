name: Integration Tests

on:
  push:
    branches:
      - main
      - release-*.*.*
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

permissions: {}

jobs:
  detect-changes:
    # Run on `grafana/grafana` main branch, or on pull requests to prevent double-running on mirrors
    if: (github.event_name == 'pull_request' || (github.event_name == 'push' && github.repository == 'grafana/grafana'))
    name: Detect whether code changed
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      changed: ${{ steps.detect-changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true # required to get more history in the changed-files action
          fetch-depth: 2
      - name: Detect changes
        id: detect-changes
        uses: ./.github/actions/change-detection
        with:
          self: .github/workflows/pr-test-integration.yml

  packages:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed == 'true'
    name: List packages with integration tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      packages: ${{ steps.list-packages.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod
          cache: true
      - name: List packages
        id: list-packages
        run: |
          set -euo pipefail
          echo "packages=$(./scripts/ci/backend-tests/pkgs-with-tests-named.sh -b TestIntegration -s | xargs | tr -d '\n' | jq --slurp --raw-input -c '{package: . | split(" ")')}" >> "$GITHUB_OUTPUT"

  sqlite:
    needs: [detect-changes, packages]
    if: needs.detect-changes.outputs.changed == 'true'
    strategy:
      matrix: ${{ fromJson(needs.packages.outputs.packages) }}
      fail-fast: false

    name: Sqlite (${{ matrix.package }})
    runs-on: ubuntu-x64-large-io
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod
          cache: true
      - name: Run tests
        run: go test -tags=sqlite -timeout=8m -run '^TestIntegration' "${{ matrix.package }}"

  # This is the job that is actually required by rulesets.
  # We want to only require one job instead of all the individual tests and shards.
  # Future work also allows us to start skipping some tests based on changed files.
  required-backend-integration-tests:
    needs:
      - sqlite
    # always() is the best function here.
    # success() || failure() will skip this function if any need is also skipped.
    # That means conditional test suites will fail the entire requirement check.
    if: always()

    name: All backend integration tests complete
    runs-on: ubuntu-latest
    steps:
      - name: Check test suites
        env:
          NEEDS: ${{ toJson(needs) }}
        run: |
          FAILURES="$(echo "$NEEDS" | jq 'with_entries(select(.value.result == "failure")) | map_values(.result)')"
          echo "$FAILURES"
          if [ "$(echo "$FAILURES" | jq '. | length')" != "0" ]; then
            exit 1
          fi
          echo "All OK!"
