name: PR Test Backend

on:
  pull_request:
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/pr-test-backend.yml'
  push:
    branches:
      - 'main'
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/pr-test-backend.yml'

permissions:
  contents: read
  id-token: write

jobs:
  # This job determines if we need to generate coverage based on which files changed
  check-coverage:
    name: Check Coverage Requirements
    runs-on: ubuntu-latest
    outputs:
      generate: ${{ steps.check-coverage.outputs.generate }}
    steps:
      - name: Check if coverage should be generated
        id: check-coverage
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR changed files:"
            files=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --jq '.[].filename')
            echo "$files"
            if echo "$files" | grep -E "(pkg/|go\.|\.github/workflows/pr-test-backend\.yml)"; then
              echo "Coverage will be generated: true (PR changes)"
              echo "generate=true" >> $GITHUB_OUTPUT
            else
              echo "Coverage will be generated: false"
              echo "generate=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] && \
               [[ "${{ github.event.head_commit.modified }}" =~ (pkg/|go\.|\.github/workflows/pr-test-backend\.yml) ]]; then
            echo "Coverage will be generated: true (push to main)"
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "Coverage will be generated: false"
            echo "generate=false" >> $GITHUB_OUTPUT
          fi

  setup-edition:
    name: Setup Edition
    needs: check-coverage
    runs-on: ubuntu-latest
    outputs:
      edition: ${{ steps.edition.outputs.edition }}
      use_enterprise: ${{ steps.edition.outputs.use_enterprise }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine edition
        id: edition
        uses: ./.github/actions/determine-edition
        
      - name: Setup Enterprise
        if: steps.edition.outputs.use_enterprise == 'true'
        uses: ./.github/actions/setup-enterprise

      # Save the edition information first
      - name: Save edition info
        run: |
          mkdir -p ./setup-state
          echo "${{ steps.edition.outputs.edition }}" > ./setup-state/edition
          echo "${{ steps.edition.outputs.use_enterprise }}" > ./setup-state/use_enterprise
          echo "EDITION=${{ steps.edition.outputs.edition }}" > ./setup-state/env.txt
          echo "WIRE_TAGS=${{ steps.edition.outputs.edition }}" >> ./setup-state/env.txt
          echo "GO_TAGS=${{ steps.edition.outputs.edition }}" >> ./setup-state/env.txt
          
      # Then cache the entire pkg directory if we're using enterprise
      - name: Cache enterprise files
        if: steps.edition.outputs.use_enterprise == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: enterprise-pkg
          path: pkg/
          retention-days: 0
          
      # Cache the setup state for all jobs
      - name: Cache setup state
        uses: actions/upload-artifact@v4
        with:
          name: setup-state
          path: setup-state/
          retention-days: 0

  # We need this job to run the backend tests synchronously in debug mode
  # This helps isolate whether the issue is with parallelization or the tests themselves
  debug-test-sequential:
    name: Debug Sequential Tests
    needs: [check-coverage, setup-edition]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Get the edition info
      - name: Download setup state
        uses: actions/download-artifact@v4
        with:
          name: setup-state
          path: ./setup-state
          
      - name: Load edition info
        id: load-edition
        run: |
          echo "edition=$(cat ./setup-state/edition)" >> $GITHUB_OUTPUT
          echo "use_enterprise=$(cat ./setup-state/use_enterprise)" >> $GITHUB_OUTPUT
          cat ./setup-state/env.txt >> $GITHUB_ENV
          
      # Download enterprise files if needed
      - name: Download enterprise files
        if: steps.load-edition.outputs.use_enterprise == 'true'
        uses: actions/download-artifact@v4
        with:
          name: enterprise-pkg
          path: pkg/
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential shared-mime-info make
      
      # Generate Go files with the appropriate tags
      - name: Generate Go files
        run: |
          echo "Generating with tags: ${{ env.WIRE_TAGS }}"
          go run ./pkg/build/wire/cmd/wire/main.go gen -tags "${{ env.WIRE_TAGS }}" ./pkg/server
          make gen-go
          
      # Run a single quick test to verify enterprise setup
      - name: Verify enterprise setup
        if: steps.load-edition.outputs.use_enterprise == 'true'
        run: |
          echo "Enterprise files:"
          find ./pkg/extensions -type d | head -5
          echo "Total enterprise files: $(find ./pkg/extensions -name "*.go" | wc -l)"
          
          # Try a test that doesn't depend on complex db setup
          GO_TAGS=${{ env.GO_TAGS }} go test -v github.com/grafana/grafana/pkg/extensions/auth -run TestIntegration

      # Run unit and integration tests sequentially
      # - name: Run unit tests
      #   run: |
      #     if [ "${{ needs.check-coverage.outputs.generate }}" == "true" ]; then
      #       COVER_OPTS="-coverprofile=unit.cov -covermode=atomic -coverpkg=github.com/grafana/grafana/..." GO_TAGS=${{ env.GO_TAGS }} make test-go-unit
      #     else
      #       GO_TAGS=${{ env.GO_TAGS }} make test-go-unit
      #     fi

      - name: Run integration tests
        run: |
          if [ "${{ needs.check-coverage.outputs.generate }}" == "true" ]; then
            COVER_OPTS="-coverprofile=integration.cov -covermode=atomic -coverpkg=github.com/grafana/grafana/..." GO_TAGS=${{ env.GO_TAGS }} make test-go-integration
          else
            GO_TAGS=${{ env.GO_TAGS }} make test-go-integration
          fi

      # Generate coverage report if needed
      - name: Generate Coverage Report
        if: needs.check-coverage.outputs.generate == 'true'
        uses: ./.github/actions/report-coverage
        with:
          unit-cov-path: unit.cov
          integration-cov-path: integration.cov

  test-unit:
    name: Test Backend Unit
    if: false
    needs: [check-coverage, setup-edition, debug-test-sequential]
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Get the edition info
      - name: Download setup state
        uses: actions/download-artifact@v4
        with:
          name: setup-state
          path: ./setup-state
          
      - name: Load edition info
        id: load-edition
        run: |
          echo "edition=$(cat ./setup-state/edition)" >> $GITHUB_OUTPUT
          echo "use_enterprise=$(cat ./setup-state/use_enterprise)" >> $GITHUB_OUTPUT
          cat ./setup-state/env.txt >> $GITHUB_ENV
          
      # Download enterprise files if needed
      - name: Download enterprise files
        if: steps.load-edition.outputs.use_enterprise == 'true'
        uses: actions/download-artifact@v4
        with:
          name: enterprise-pkg
          path: pkg/
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential shared-mime-info make

      - name: Get runner name
        run: echo ${{ runner.name }}

      - name: Verify CUE generation
        run: CODEGEN_VERIFY=1 make gen-cue

      - name: Verify Jsonnet generation
        run: CODEGEN_VERIFY=1 make gen-jsonnet

      # Generate Go files with the appropriate tags
      - name: Generate Go files
        run: |
          echo "Generating with tags: ${{ env.WIRE_TAGS }}"
          go run ./pkg/build/wire/cmd/wire/main.go gen -tags "${{ env.WIRE_TAGS }}" ./pkg/server
          make gen-go

      # Run the unit tests with coverage if needed
      - name: Run backend unit tests
        shell: bash
        run: ${{ needs.check-coverage.outputs.generate == 'true' && format('COVER_OPTS="-coverprofile=unit.cov -covermode=atomic -coverpkg=github.com/grafana/grafana/..." GO_TAGS={0} make test-go-unit', env.GO_TAGS) || format('GO_TAGS={0} make test-go-unit', env.GO_TAGS) }}

      - name: Upload unit coverage
        if: needs.check-coverage.outputs.generate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: unit-cov
          path: unit.cov
          retention-days: 0

  test-integration:
    name: Test Backend Integration
    needs: [check-coverage, setup-edition, debug-test-sequential]
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Get the edition info
      - name: Download setup state
        uses: actions/download-artifact@v4
        with:
          name: setup-state
          path: ./setup-state
          
      - name: Load edition info
        id: load-edition
        run: |
          echo "edition=$(cat ./setup-state/edition)" >> $GITHUB_OUTPUT
          echo "use_enterprise=$(cat ./setup-state/use_enterprise)" >> $GITHUB_OUTPUT
          cat ./setup-state/env.txt >> $GITHUB_ENV
          
      # Download enterprise files if needed
      - name: Download enterprise files
        if: steps.load-edition.outputs.use_enterprise == 'true'
        uses: actions/download-artifact@v4
        with:
          name: enterprise-pkg
          path: pkg/
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential shared-mime-info make

      - name: Get runner name
        run: echo ${{ runner.name }}

      # Generate Go files with the appropriate tags
      - name: Generate Go files
        run: |
          echo "Generating with tags: ${{ env.WIRE_TAGS }}"
          go run ./pkg/build/wire/cmd/wire/main.go gen -tags "${{ env.WIRE_TAGS }}" ./pkg/server
          make gen-go

      # Run the integration tests with coverage if needed
      - name: Run backend integration tests
        shell: bash
        run: ${{ needs.check-coverage.outputs.generate == 'true' && format('COVER_OPTS="-coverprofile=integration.cov -covermode=atomic -coverpkg=github.com/grafana/grafana/..." GO_TAGS={0} make test-go-integration', env.GO_TAGS) || format('GO_TAGS={0} make test-go-integration', env.GO_TAGS) }}

      - name: Upload integration coverage
        if: needs.check-coverage.outputs.generate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: integration-cov
          path: integration.cov
          retention-days: 0

  # This job combines and processes coverage data from both test jobs
  report-coverage:
    name: Report Coverage
    # Depends on both test jobs for their coverage artifacts and check-coverage for generation decision
    needs: [check-coverage, test-unit, test-integration, setup-edition]
    if: needs.check-coverage.outputs.generate == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Get the edition info
      - name: Download setup state
        uses: actions/download-artifact@v4
        with:
          name: setup-state
          path: ./setup-state
          
      - name: Load edition info
        id: load-edition
        run: |
          echo "edition=$(cat ./setup-state/edition)" >> $GITHUB_OUTPUT
          echo "use_enterprise=$(cat ./setup-state/use_enterprise)" >> $GITHUB_OUTPUT
          cat ./setup-state/env.txt >> $GITHUB_ENV
          
      # Download enterprise files if needed
      - name: Download enterprise files
        if: steps.load-edition.outputs.use_enterprise == 'true'
        uses: actions/download-artifact@v4
        with:
          name: enterprise-pkg
          path: pkg/
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true

      # Generate Go files with the appropriate tags
      - name: Generate Go files
        run: |
          echo "Generating with tags: ${{ env.WIRE_TAGS }}"
          go run ./pkg/build/wire/cmd/wire/main.go gen -tags "${{ env.WIRE_TAGS }}" ./pkg/server
          make gen-go
          
      - name: Download unit coverage
        continue-on-error: true
        id: download-unit
        uses: actions/download-artifact@v4
        with:
          name: unit-cov
          path: .
          
      - name: Download integration coverage
        continue-on-error: true
        id: download-integration
        uses: actions/download-artifact@v4
        with:
          name: integration-cov
          path: .

      - name: Generate Coverage Report
        uses: ./.github/actions/report-coverage
        with:
          unit-cov-path: unit.cov
          integration-cov-path: integration.cov
        env:
          CHECK_COVERAGE_THRESHOLDS: false  # Start with thresholds disabled until coverage improves

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
