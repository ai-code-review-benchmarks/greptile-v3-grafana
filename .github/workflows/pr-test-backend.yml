name: Test Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

permissions:
  contents: read
  id-token: write

jobs:
  # This job determines if we need to generate coverage based on which files changed
  check-coverage:
    name: Check Coverage Requirements
    runs-on: ubuntu-latest
    outputs:
      generate: ${{ steps.check-coverage.outputs.generate }}
    steps:
      - name: Check if coverage should be generated
        id: check-coverage
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR changed files:"
            files=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --jq '.[].filename')
            echo "$files"
            if echo "$files" | grep -E "(pkg/|go\.|\.github/workflows/pr-test-backend\.yml)"; then
              echo "Coverage will be generated: true (PR changes)"
              echo "generate=true" >> $GITHUB_OUTPUT
            else
              echo "Coverage will be generated: false"
              echo "generate=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] && \
               [[ "${{ github.event.head_commit.modified }}" =~ (pkg/|go\.|\.github/workflows/pr-test-backend\.yml) ]]; then
            echo "Coverage will be generated: true (push to main)"
            echo "generate=true" >> $GITHUB_OUTPUT
          else
            echo "Coverage will be generated: false"
            echo "generate=false" >> $GITHUB_OUTPUT
          fi

  setup-enterprise:
    name: Setup Enterprise
    needs: check-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine edition
        id: edition
        uses: ./.github/actions/determine-edition
        
      - name: Setup Enterprise
        if: steps.edition.outputs.use_enterprise == 'true'
        uses: ./.github/actions/setup-enterprise

      - name: Cache enterprise state
        if: steps.edition.outputs.use_enterprise == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: enterprise-state
          path: pkg/
          # Artifact will be deleted after the workflow completes
          retention-days: 0

  test-unit:
    name: Test Backend Unit
    needs: [check-coverage, setup-enterprise]
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine edition
        id: edition
        uses: ./.github/actions/determine-edition
        
      - name: Set edition environment variable
        run: echo "EDITION=${{ steps.edition.outputs.edition }}" >> $GITHUB_ENV
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential shared-mime-info make

      - name: Get runner name
        run: echo ${{ runner.name }}

      # Restore enterprise state only if we're using enterprise
      - name: Restore enterprise state
        if: steps.edition.outputs.use_enterprise == 'true'
        uses: actions/download-artifact@v4
        with:
          name: enterprise-state
          path: pkg/

      - name: Verify CUE generation
        run: CODEGEN_VERIFY=1 make gen-cue

      - name: Verify Jsonnet generation
        run: CODEGEN_VERIFY=1 make gen-jsonnet

      # Generate Go files with appropriate tags based on edition
      - name: Generate Go files with edition tag
        run: |
          go run ./pkg/build/wire/cmd/wire/main.go gen -tags "${{ steps.edition.outputs.edition }}" ./pkg/server
          make gen-go

      # Coverage is only generated if check-coverage determined it was needed
      - name: Run backend unit tests
        shell: bash
        run: ${{ needs.check-coverage.outputs.generate == 'true' && format('COVER_OPTS="-coverprofile=unit.cov -covermode=atomic -coverpkg=github.com/grafana/grafana/..." GO_TAGS={0} make test-go-unit', steps.edition.outputs.edition) || format('GO_TAGS={0} make test-go-unit', steps.edition.outputs.edition) }}

      - name: Upload unit coverage
        if: needs.check-coverage.outputs.generate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: unit-cov
          path: unit.cov
          # Artifact will be deleted after the workflow completes
          retention-days: 0

  test-integration:
    name: Test Backend Integration
    needs: [check-coverage, setup-enterprise]
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine edition
        id: edition
        uses: ./.github/actions/determine-edition
        
      - name: Set edition environment variable
        run: echo "EDITION=${{ steps.edition.outputs.edition }}" >> $GITHUB_ENV
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential shared-mime-info make

      - name: Get runner name
        run: echo ${{ runner.name }}

      # Restore enterprise state only if we're using enterprise
      - name: Restore enterprise state
        if: steps.edition.outputs.use_enterprise == 'true'
        uses: actions/download-artifact@v4
        with:
          name: enterprise-state
          path: pkg/

      # Generate Go files with appropriate tags based on edition
      - name: Generate Go files with edition tag
        run: |
          go run ./pkg/build/wire/cmd/wire/main.go gen -tags "${{ steps.edition.outputs.edition }}" ./pkg/server
          make gen-go

      - name: Run backend integration tests
        shell: bash
        run: ${{ needs.check-coverage.outputs.generate == 'true' && format('COVER_OPTS="-coverprofile=integration.cov -covermode=atomic -coverpkg=github.com/grafana/grafana/..." GO_TAGS={0} make test-go-integration', steps.edition.outputs.edition) || format('GO_TAGS={0} make test-go-integration', steps.edition.outputs.edition) }}

      - name: Upload integration coverage
        if: needs.check-coverage.outputs.generate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: integration-cov
          path: integration.cov
          # Artifact will be deleted after the workflow completes
          retention-days: 0

  # This job combines and processes coverage data from both test jobs
  report-coverage:
    name: Report Coverage
    # Depends on both test jobs for their coverage artifacts and check-coverage for generation decision
    needs: [check-coverage, test-unit, test-integration]
    if: needs.check-coverage.outputs.generate == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine edition
        id: edition
        uses: ./.github/actions/determine-edition
        
      - name: Set edition environment variable
        run: echo "EDITION=${{ steps.edition.outputs.edition }}" >> $GITHUB_ENV
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true

      # Must restore enterprise state before processing coverage files since they contain
      # references to enterprise code that existed during test execution
      - name: Restore enterprise state
        if: steps.edition.outputs.use_enterprise == 'true'
        uses: actions/download-artifact@v4
        with:
          name: enterprise-state
          path: pkg/

      # Need to generate Go files before processing coverage since coverage references generated code
      - name: Generate Go files with edition tag
        run: |
          go run ./pkg/build/wire/cmd/wire/main.go gen -tags "${{ steps.edition.outputs.edition }}" ./pkg/server
          make gen-go
          
      - name: Download unit coverage
        continue-on-error: true
        id: download-unit
        uses: actions/download-artifact@v4
        with:
          name: unit-cov
          path: .
          
      - name: Download integration coverage
        continue-on-error: true
        id: download-integration
        uses: actions/download-artifact@v4
        with:
          name: integration-cov
          path: .

      - name: Generate Coverage Report
        uses: ./.github/actions/report-coverage
        with:
          unit-cov-path: unit.cov
          integration-cov-path: integration.cov
        env:
          CHECK_COVERAGE_THRESHOLDS: false  # Start with thresholds disabled until coverage improves

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
