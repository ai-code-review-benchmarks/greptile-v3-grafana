name: Test Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

permissions:
  contents: read
  id-token: write

env:
  EDITION: 'oss'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential shared-mime-info make

      - name: Get runner name
        run: echo ${{ runner.name }}

      - name: Retrieve GitHub App secrets
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets-v1.0.1
        with:
          repo_secrets: |
            APP_ID=<my-new-gitrhub-app>:app-id
            APP_INSTALLATION_ID=<my-new-gitrhub-app>:app-installation-id
            PRIVATE_KEY=<my-new-gitrhub-app>:private-key

      - name: Debug secrets (redacted)
        run: |
          if [ -n "${{ env.APP_ID }}" ]; then echo "APP_ID is set"; else echo "APP_ID is not set"; fi
          if [ -n "${{ env.APP_INSTALLATION_ID }}" ]; then echo "APP_INSTALLATION_ID is set"; else echo "APP_INSTALLATION_ID is not set"; fi
          if [ -n "${{ env.PRIVATE_KEY }}" ]; then echo "PRIVATE_KEY is set"; else echo "PRIVATE_KEY is not set"; fi

      - name: Generate GitHub App token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}

      # - name: Debug Enterprise Access
      #   env:
      #     GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      #   run: |
      #     echo "Testing enterprise repo access..."
      #     echo "App ID being used: ${{ env.APP_ID }}"
      #     echo "Installation ID being used: ${{ env.APP_INSTALLATION_ID }}"
      #     # Test the token
      #     echo "Token info:"
      #     curl -H "Authorization: token ${GH_TOKEN}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/installation/repositories
      #     # Try the clone
      #     git ls-remote https://x-access-token:${GH_TOKEN}@github.com/grafana/grafana-enterprise.git

      - name: Setup Enterprise (PR only)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Clone enterprise repo using the GitHub App token
          if ! git clone https://x-access-token:${GH_TOKEN}@github.com/grafana/grafana-enterprise.git ../grafana-enterprise; then
            echo "Failed to clone enterprise repository - this is expected for non-enterprise contributors"
            exit 0
          fi
          
          cd ../grafana-enterprise
          
          # Try to checkout the PR branch first, then base branch, then fall back to main
          if git checkout ${GITHUB_HEAD_REF}; then
            echo "checked out ${GITHUB_HEAD_REF}"
          elif git checkout ${GITHUB_BASE_REF}; then
            echo "checked out ${GITHUB_BASE_REF}"
          else
            git checkout main
          fi
          
          # Setup symlink and build
          cd ../grafana
          ln -s . grafana
          cd ../grafana-enterprise
          ./build.sh

      - name: Verify CUE generation
        run: CODEGEN_VERIFY=1 make gen-cue

      - name: Verify Jsonnet generation
        run: CODEGEN_VERIFY=1 make gen-jsonnet

      - name: Wire install
        run: make gen-go

      - name: Run backend tests
        run: |
          go list -f '{{.Dir}}/...' -m  | xargs go test -short -covermode=atomic -timeout=5m

      - name: Run backend integration tests
        run: |
          go test -count=1 -covermode=atomic -timeout=5m -run '^TestIntegration' $(find ./pkg -type f -name '*_test.go' -exec grep -l '^func TestIntegration' '{}' '+' | grep -o '\(.*\)/' | sort -u)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
