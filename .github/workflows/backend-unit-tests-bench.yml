name: Backend Unit Tests (grafana-bench)

on:
  pull_request:
  push:
    branches:
      - main
      - release-*.*.*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

permissions: {}

jobs:
  detect-changes:
    name: Detect whether code changed
    # Run on `grafana/grafana` main branch, or on pull requests to prevent double-running on mirrors
    if: (github.event_name == 'pull_request' || (github.event_name == 'push' && github.repository == 'grafana/grafana'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      changed: ${{ steps.detect-changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true # required to get more history in the changed-files action
          fetch-depth: 2
      - name: Detect changes
        id: detect-changes
        uses: ./.github/actions/change-detection
        with:
          self: .github/workflows/backend-unit-tests.yml

  grafana:
    # Run this workflow only for PRs from forks
    # the `pr-backend-unit-tests-enterprise` workflow will run instead
    needs: detect-changes
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        shard: [
          1/8
          # 1/8, 2/8, 3/8, 4/8,
          # 5/8, 6/8, 7/8, 8/8,
        ]
      fail-fast: false

    name: Grafana (${{ matrix.shard }})
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod
      - name: Setup grafana-bench
        run: |
          docker cp $(docker create ghcr.io/grafana/grafana-bench:v0.6.1):/usr/local/bin/grafana-bench .
      - name: Run unit tests
        env:
          SHARD: ${{ matrix.shard }}
        run: |
          set -euo pipefail
          readarray -t PACKAGES <<< "$(./scripts/ci/backend-tests/shard.sh -N"$SHARD")"
          ./grafana-bench test --test-runner go --grafana-version main \
           --go-test-packages "${PACKAGES[@]}" \
           --go-args "-short -timeout=30m"

  # This is the job that is actually required by rulesets.
  # We need to require EITHER the OSS or the Enterprise job to pass.
  # However, if one is skipped, GitHub won't flat-map the shards,
  #   so they won't be accepted by a ruleset.
  required-backend-unit-tests:
    needs:
      - grafana
    # always() is the best function here.
    # success() || failure() will skip this function if any need is also skipped.
    # That means conditional test suites will fail the entire requirement check.
    if: always()

    name: All backend unit tests complete
    runs-on: ubuntu-latest
    steps:
      - name: Check test suites
        env:
          NEEDS: ${{ toJson(needs) }}
        run: |
          FAILURES="$(echo "$NEEDS" | jq 'with_entries(select(.value.result == "failure")) | map_values(.result)')"
          echo "$FAILURES"
          if [ "$(echo "$FAILURES" | jq '. | length')" != "0" ]; then
            exit 1
          fi
          echo "All OK!"
