name: 'Go Coverage Processor'
description: 'Process Go test coverage files and generate reports'

inputs:
  test-type:
    description: 'Type of test (e.g., be-unit, be-integration)'
    required: true
    type: string
  coverage-file:
    description: 'Path to the Go coverage file (.cov)'
    required: true
    type: string
  retention-days:
    description: 'Number of days to retain artifacts'
    required: false
    default: '30'
  compression-level:
    description: 'Compression level for artifacts'
    required: false
    default: '9'
  codecov-token:
    description: 'Token for CodeCov (required for CodeCov reporting)'
    required: false
    default: ''
  codecov-flag:
    description: 'Flag to categorize the upload to CodeCov'
    required: false
    default: ''
  codecov-name:
    description: 'Custom name for the upload to CodeCov'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Process Go coverage output
      shell: bash
      run: |
        # Ensure valid coverage file even if empty
        if [ ! -s ${{ inputs.coverage-file }} ]; then
          echo "mode: set" > ${{ inputs.coverage-file }}
        fi
        
        # Set output file names based on test type
        FUNC_LOG="${{ inputs.test-type }}-funcs.log"
        HTML_REPORT="${{ inputs.test-type }}.html"
        
        # Process Go coverage
        if ! go tool cover -func ${{ inputs.coverage-file }} > $FUNC_LOG; then
          echo "::warning::Failed to generate function coverage report"
        fi
        
        if ! go tool cover -html ${{ inputs.coverage-file }} -o $HTML_REPORT; then
          echo "::warning::Failed to generate HTML coverage report"
        fi
        
        # Add coverage summary to GitHub step summary
        echo "# ${{ inputs.test-type }} Coverage" >> $GITHUB_STEP_SUMMARY
        if grep -q "total:" $FUNC_LOG; then
          grep 'total:' $FUNC_LOG | tr '\t' ' ' >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage data available" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.test-type }}-coverage
        path: |
          ${{ inputs.coverage-file }}
          ${{ inputs.test-type }}-funcs.log
          ${{ inputs.test-type }}.html
        retention-days: ${{ inputs.retention-days }}
        compression-level: ${{ inputs.compression-level }}

    - name: Report coverage to CodeCov
      uses: codecov/codecov-action@v5
      if: inputs.codecov-token != ''
      with:
        files: ${{ inputs.coverage-file }}
        flags: ${{ inputs.codecov-flag || inputs.test-type }}
        name: ${{ inputs.codecov-name || inputs.test-type }}
        slug: grafana/grafana
        # This URL doesn't use the Google auth, but is much more locked down. As such, it requires OIDC or a CodeCov-provided token to do anything.
        url: https://codecov-webhook.grafana-dev.net
        token: ${{ inputs.codecov-token }}
